/*
  This example includes the recursive version of the DFS algorithm.
  @input: a digraf D and a vertex i0
  @output: the list S of the verices reachable from i0
*/

// the recursive function
dfsRec(i) {
  if (S[i] == 0) {
    // visit i
    S[i] = 1;
    p = D.a[i];
    while (p.size() > 0) {
      j = p.topFront();
      p.popFront();
      dfsRec(j);
    }
  }
}

// the calling program
i = 0;
while (i < D.n) {
  S[i] = 0;
  i = i + 1;
}
dfsRec(1);

/* Example of running command line
   Assuming that the digraph D is given by
     D.n = 3
     D.a[0] = (1,2)
     D.a[1] = (2, 0)
     D.a[2] = (0)
   and the vertex i0 is one, then the krun command is 
     krun programs/dfsnerec.alk \
       -cST "D |-> { n |-> 3
                     a |-> { 0 |-> [1, 2] 1 |-> [2, 0] 2 |-> [0] } }
             i0 |-> 1
             p |-> { .Map }
             S |-> { .Map }" 
*/

